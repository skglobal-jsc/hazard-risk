import { createGrid } from './grid';
import { classifyRiskFromRGB, calculateRiskStats, isWaterColor, DEFAULT_TSUNAMI_CONFIG } from './risk';
import { NodeRasterReader, BrowserRasterReader, createTileProvider } from './raster';
import { TileCache } from './cache';
import type { AnalyzeRiskOptions, AnalyzeRiskResult, GridPoint } from './types';

// H√†m ch√≠nh ph√¢n t√≠ch r·ªßi ro trong polygon
export async function analyzeRiskInPolygon(
  options: AnalyzeRiskOptions,
  cache?: TileCache
): Promise<AnalyzeRiskResult> {
  const {
    polygon,
    hazardTileUrl,
    baseTileUrl,
    gridSize,
    zoom,
    hazardConfig = DEFAULT_TSUNAMI_CONFIG
  } = options;

  // T·∫°o tile providers t·ª´ URL templates
  const hazardTileProvider = createTileProvider(hazardTileUrl, cache);
  const baseTileProvider = createTileProvider(baseTileUrl, cache);

  // B∆∞·ªõc 1: T·∫°o l∆∞·ªõi ƒëi·ªÉm trong polygon
  const grid = createGrid(polygon, gridSize, zoom);

  // B∆∞·ªõc 2: Preload tiles v√†o cache (n·∫øu c√≥ cache)
  if (cache) {
    const tileCoords = [...new Set(grid.map(point => point.tile))];
    await cache.preloadTiles([hazardTileUrl, baseTileUrl], zoom, tileCoords);
  }

  // B∆∞·ªõc 3: ƒê·ªçc pixel t·ª´ hazard tile v√† base tile
  await processGridPixels(grid, hazardTileProvider, baseTileProvider, cache, hazardConfig);

  // B∆∞·ªõc 4: T√≠nh th·ªëng k√™
  const stats = calculateRiskStats(grid, hazardConfig);

  return {
    stats,
    total: grid.length,
    grid,
    hazardConfig
  };
}

// X·ª≠ l√Ω ƒë·ªçc pixel cho t·ª´ng ƒëi·ªÉm trong grid
async function processGridPixels(
  grid: GridPoint[],
  hazardTileProvider: (z: number, x: number, y: number) => Promise<any>,
  baseTileProvider: (z: number, x: number, y: number) => Promise<any>,
  cache?: TileCache,
  hazardConfig = DEFAULT_TSUNAMI_CONFIG
) {
  // L·∫•y m√†u level 0 t·ª´ config
  const level0Color = hazardConfig.levels[0].color;

  // T·∫°o raster reader (t·ª± ƒë·ªông detect Node.js hay browser)
  const isNode = typeof window === 'undefined';
  const hazardReader = isNode
    ? new NodeRasterReader(hazardTileProvider, level0Color)
    : new BrowserRasterReader(hazardTileProvider, level0Color);
  const baseReader = isNode
    ? new NodeRasterReader(baseTileProvider, level0Color)
    : new BrowserRasterReader(baseTileProvider, level0Color);

  console.log(`üîç Processing ${grid.length} grid points...`);

  // X·ª≠ l√Ω t·ª´ng ƒëi·ªÉm
  for (const point of grid) {
    try {
      // ƒê·ªçc pixel t·ª´ hazard tile
      const hazardRGB = await hazardReader.getPixelRGB(point.tile, point.pixel);
      point.riskLevel = classifyRiskFromRGB(hazardRGB.r, hazardRGB.g, hazardRGB.b, hazardConfig);

      // ƒê·ªçc pixel t·ª´ base tile ƒë·ªÉ ki·ªÉm tra n∆∞·ªõc
      const baseRGB = await baseReader.getPixelRGB(point.tile, point.pixel);
      point.isWater = isWaterColor(baseRGB.r, baseRGB.g, baseRGB.b, hazardConfig);
    } catch (error: any) {
      // Ph√¢n bi·ªát c√°c lo·∫°i l·ªói
      if (error.message?.includes('TILE_NOT_FOUND')) {
        // Tile kh√¥ng t·ªìn t·∫°i = kh√¥ng c√≥ d·ªØ li·ªáu r·ªßi ro
        console.warn(`No hazard data for point at ${point.lat}, ${point.lon} - Treating as no risk`);
        point.riskLevel = 0; // Kh√¥ng r·ªßi ro
        point.isWater = false;
      } else {
        // L·ªói kh√°c (network, parsing, etc.)
        console.warn(`Error processing point at ${point.lat}, ${point.lon}:`, error);
        point.riskLevel = 0; // M·∫∑c ƒë·ªãnh kh√¥ng r·ªßi ro
        point.isWater = false;
      }
    }
  }

  console.log(`‚úÖ Processing completed. Cache stats:`, cache?.getStats());
}

// Export c√°c type v√† function c·∫ßn thi·∫øt
export type {
  RiskLevel,
  RiskStat,
  GridPoint,
  AnalyzeRiskOptions,
  AnalyzeRiskResult,
  GeoJSONPolygon,
  HazardConfig,
  RiskLevelConfig
} from './types';

export { NodeRasterReader, BrowserRasterReader, createTileProvider } from './raster';
export { TileCache } from './cache';
export { DEFAULT_TSUNAMI_CONFIG, createHazardConfig } from './risk';
